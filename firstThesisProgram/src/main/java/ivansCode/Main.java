
package ivansCode;

import com.github.javaparser.StaticJavaParser;
import ivansCode.components.Mutant;
import ivansCode.components.QuineBuilder;
import ivansCode.components.techniques.Technique;
import ivansCode.components.techniques.TechniqueFactory;
import ivansCode.components.testing.KillMatrix;
import ivansCode.components.testing.TestResults;
import ivansCode.utils.ApplicationProperties;
import ivansCode.components.Project;
import ivansCode.components.testing.TestExecutor;
import ivansCode.utils.IOUtility;
import ivansCode.utils.StringUtils;
import ivansCode.utils.ThreadService;

import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Path;
import java.util.List;

public class Main {

    public static void main(String[] args) throws Exception {

        ThreadService.startup();
        ApplicationProperties.readApplicationProperties();

        List<Project> projects = ApplicationProperties.getProjects();
        List<TechniqueFactory<? extends Technique>> techniqueFactories = ApplicationProperties.getFactories();
        TestExecutor testExecutor = new TestExecutor();

        for (Project project : projects) {
            testExecutor.setProject(project);
            for (TechniqueFactory<? extends Technique> factory : techniqueFactories) {
                int numConfigurations = factory.getNumConfigurations();
                for (int i = 0; i < numConfigurations; i++) {
                    QuineBuilder quineBuilder = new QuineBuilder(project.getOriginalSourceCode());
                    KillMatrix matrix = new KillMatrix();
                    Technique technique = factory.getTechnique(i, project);
                    while (technique.hasNext()) {
                        Mutant mutant = technique.next();
                        IOUtility.saveTo(
                                project.getTargetCodePath().getParent(),
                                project.getSimpleSubjectClassName(),
                                ".java",
                                mutant.getMutatedSourceCode().getBytes(StandardCharsets.UTF_8));
                        TestResults testResults = testExecutor.execute();
                        testResults.writeTo(matrix, mutant);
                        quineBuilder.add(mutant);
                        printInformation(project, mutant, technique, testResults);
                    }
                    Path savePath = Path.of(ApplicationProperties.getOutputPath().toString(),
                            project.getSubjectClassName(), technique.getDescription());
                    IOUtility.saveTo(savePath, KillMatrix.FILE_NAME, KillMatrix.FILE_TYPE,
                            matrix.toString().getBytes(StandardCharsets.UTF_8));
                    IOUtility.compileTo(savePath, QuineBuilder.CLASS_NAME, quineBuilder.build());
                }
            }
        }

        ThreadService.shutdown();

    }

    public static void printInformation(Project project, Mutant mutant, Technique technique, TestResults testResults){

        System.out.printf("Mutant %d of technique %s has been processed%s", mutant.getId(),
                technique.getDescription(), System.lineSeparator());

        System.out.printf("Passed %d tests out of %d%s", testResults.getNumPassedTests(),
                project.getTestMethodNames().size(), System.lineSeparator());

        if (!mutant.getGeneratedBy().isEmpty()){
            System.out.printf("Generated by: %s%s", mutant.getGeneratedBy(), System.lineSeparator());
        }

        String originalSourceCode = project.getOriginalSourceCode();
        String mutatedSourceCode = mutant.getMutatedSourceCode();
        int index = org.apache.commons.lang.StringUtils.indexOfDifference(originalSourceCode, mutatedSourceCode);
        if (index != -1){
            String from = originalSourceCode.substring(index, Math.min(originalSourceCode.length(), index + 20));
            String to = mutatedSourceCode.substring(index, Math.min(mutatedSourceCode.length(), index + 20));
            System.out.printf(
                    "Changed '%s' to '%s'%s",
                    StringUtils.normalizeWhitespace(from),
                    StringUtils.normalizeWhitespace(to),
                    System.lineSeparator()
            );
        }

        System.out.println();

    }


}
